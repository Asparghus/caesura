name: On Push
on:
  push:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
jobs:

  release:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - id: release
      env:
        GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: ${{ secrets.RELEASE_SCRIPT }}

    - uses: actions/upload-artifact@v4
      with:
        name: release-notes.md
        path: release-notes.md

    - run: /home/linuxbrew/.linuxbrew/bin/brew install cargo-edit
      if: ${{ steps.release.outputs.version != ''}}

    - run: /home/linuxbrew/.linuxbrew/bin/cargo-set-version set-version ${{ steps.release.outputs.version }}
      if: ${{ steps.release.outputs.version != ''}}

    - run: git --no-pager diff --color

    - uses: actions/upload-artifact@v4
      with:
        name: Cargo.toml
        path: Cargo.toml


  cargo-build:
    runs-on: ubuntu-20.04
    needs:
    - release
    steps:

    - uses: actions/checkout@v4

    - name: Restore cargo cache
      id: cache-cargo
      uses: actions/cache/restore@v4
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/

    - uses: actions/download-artifact@v4
      with:
        name: Cargo.toml

    - run: git --no-pager diff --color

    - name: Restore samples cache
      id: cache-samples
      uses: actions/cache@v4
      with:
       path: samples/content
       key: cache-samples

    - if: steps.cache-samples.outputs.cache-hit != 'true'
      run: ./samples/download-sample

    - run: |
        curl "https://github.com/casey/intermodal/releases/download/v0.1.14/imdl-v0.1.14-x86_64-unknown-linux-musl.tar.gz" \
          --location \
          --show-error \
          --silent \
        | tar \
          --extract \
          --gzip \
          --directory "/usr/local/bin" \
          --file - \
          "imdl"

    - run: sudo apt-get update

    - run: sudo apt-get install flac lame sox imagemagick --yes

    - run: cargo build --release

    - name: Save cargo cache
      id: cargo-cache-save
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.cache-cargo.outputs.cache-primary-key }}
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/

    - run: rm -rf content

    - run: ln -s samples/content content

    - run: |
        tee config.yml <<EOF
        announce_url: ${{ secrets.ANNOUNCE_URL }}
        api_key: ${{ secrets.API_KEY }}
        source: ${{ secrets.SOURCE }}
        verbosity: trace
        EOF

    - run: touch output/cache.json

    - run: touch output/queue.yml

#    - run: cargo test --release --no-fail-fast

    - name: Run cargo check
      run: |
        if ! cargo check --quiet --all-targets --message-format short
        then
          echo "::warning title=Cargo Check Failed::Please review the output for details."
        fi

    - name: Run cargo clippy
      run: |
        if ! cargo clippy --quiet --all-targets --message-format short
        then
          echo "::warning title=Clippy Check Failed::Please review the output for details."
        fi

    - name: Run cargo fmt
      run: |
        if ! cargo fmt --check
        then
          echo "::warning title=Format Check Failed::Please review the output for details."
        fi

    - run: git --no-pager diff --color

    - uses: actions/upload-artifact@v4
      with:
        name: caesura
        path: target/release/caesura


  github-release:
    runs-on: ubuntu-20.04
    if: ${{ needs.release.outputs.version != ''}}
    needs:
      - release
      - cargo-build
    steps:

    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: release-notes.md

    - name: gh release create
      if: ${{ ! contains(needs.release.outputs.version, '-') }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: >
        gh release create
        "v${{ needs.release.outputs.version }}"
        --title "v${{ needs.release.outputs.version }}"
        --notes-file release-notes.md
        --target ${{ github.ref_name }}

    - name: gh release create --prerelease
      if: ${{ contains(needs.release.outputs.version, '-') }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: >
        gh release create
        "v${{ needs.release.outputs.version }}"
        --title "v${{ needs.release.outputs.version }}"
        --notes-file release-notes.md
        --target ${{ github.ref_name }}
        --prerelease

    - uses: actions/download-artifact@v4
      with:
        name: caesura

    - name: gh release upload
      run: >
        gh release upload
        "v${{ needs.release.outputs.version }}"
        caesura
        --clobber
        --repo "${{ github.repository }}"
      env:
        GH_TOKEN: ${{ github.token }}
